@layout PublicLayout

@page "/login"

<PageTitle>Login</PageTitle>

@inject UserService userService;
@inject AuthenticationStateProvider authStateProvider;

@inject NavigationManager Navigation;
@inject NotificationService Notification;

<div class="container">

    <RadzenTemplateForm TItem="User" Data="@objUser" Submit=@OnAuthenticate>
        <DataAnnotationsValidator />
        <div class="row justify-content-center mt-5">
            <div class="col-md-10 col-lg-6">
                <div class="wrap d-md-flex">
                    <RadzenCard>
                        <div class="p-3 p-md-4">
                            <div class="d-flex">
                                <div class="w-100">
                                    <h3 class="mb-4">Sign In</h3>
                                </div>
                            </div>

                            <div class="d-flex">
                                <div class="row">

                                    <div class="form-group">
                                        <RadzenLabel Text="Login Email *" />
                                        <RadzenTextBox Name="Email" @bind-Value=@objUser.Email MaxLength="50" oninput="this.value=this.value.toLowerCase()" class="form-control" />
                                        <ValidationMessage For="@(() => objUser.Email)" />
                                    </div>

                                    <div class="form-group">
                                        <RadzenLabel Text="Login Password *" />
                                        <RadzenPassword Name="Password" @bind-Value=@objUser.Password class="form-control" />
                                        <RadzenRequiredValidator Component="Password" Text="Password is Required" />
                                    </div>


                                    <div class="form-group">
                                        <div class="mt-3">
                                            <RadzenButton ButtonType="ButtonType.Submit" Text="Sign In" Icon="lock_open" ButtonStyle="ButtonStyle.Primary" />
                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </RadzenCard>
                </div>
            </div>
        </div>
    </RadzenTemplateForm>

</div>

@code {

    User objUser = new();

    protected async Task OnAuthenticate()
    {
        try
        {
            var userAccount = userService.GetbyUsername(objUser.Email);

            if (userAccount == null)
            {
                Notification.Notify(NotificationSeverity.Error, summary: "This Login Email does not Exist");
                return;
            }
            else if (userAccount.Password != objUser.Password)
            {
                Notification.Notify(NotificationSeverity.Error, summary: "Invalid Login Password");
                return;
            }
            else
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Email = userAccount.Email,
                        Role = userAccount.RoleName,
                    });

                Navigation.NavigateTo("/dashboard", true);
            }
        }
        catch (Exception ex)
        {
            Notification.Notify(NotificationSeverity.Error, summary: ex.Message);
        }
    }
}