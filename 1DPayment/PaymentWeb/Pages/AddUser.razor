@page "/users";

<PageTitle>Login User Information</PageTitle>

@using System.Security.Claims;

@inject UserService userService;
@inject RoleService roleService;

@inject NotificationService Notification;
@inject DialogService Dialog;

<div class="container-fluid">
    <RadzenTemplateForm TItem="User" Data="@objUser" Submit=@OnFormSubmit>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Add - Login User Information</h4>
                    </div>

                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Full Name *" />
                                    <RadzenTextBox Name="Name" @bind-Value=@objUser.Name MaxLength="50" class="form-control" />
                                    <RadzenRequiredValidator Component="Name" Text="Your Name is Required" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Email *" />
                                    <RadzenTextBox Name="Email" @bind-Value=@objUser.Email MaxLength="50" oninput="this.value=this.value.toLowerCase()" class="form-control" />
                                    <ValidationMessage For="@(() => objUser.Email)" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Password *" />
                                    <RadzenPassword Name="Password" @bind-Value=@objUser.Password class="form-control" />
                                    <RadzenRequiredValidator Component="Password" Text="Password is Required" />
                                    <RadzenLengthValidator Component="Password" Min="5" Text="Password should be at least 5 Characters" />
                                </div>
                            </div>


                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Role *" />
                                    <RadzenDropDown Name="RoleName" Data=@listRole Placeholder="-- Choose --" TextProperty="RoleName" ValueProperty="RoleId" @bind-Value="@((objUser.RoleId))" class="form-control" />
                                    <RadzenRequiredValidator Component="RoleName" Text="Select Role" DefaultValue="0" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="btn-vcenter">
                                        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </RadzenTemplateForm>

    @* DataGrid Section Starts Here*@
    @*------------------------------------------------------------------------------*@
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">View - Login User Information</h4>
                </div>

                <div class="card-body">
                    <RadzenDataGrid Data="@modelData" TItem="User" PageSize="10" AllowPaging="true" ShowPagingSummary="true" AllowSorting="true" AllowFiltering="true" PagerHorizontalAlign="HorizontalAlign.Left"
                                    ColumnWidth="100%" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <Columns>
                            <RadzenDataGridColumn TItem="User" Property="UserId" Title="USER ID" Frozen="true" Width="5%" Filterable="false" Visible="false" />
                            <RadzenDataGridColumn TItem="User" Property="Name" Title="NAME" Width="15%" />
                            <RadzenDataGridColumn TItem="User" Property="Email" Title="EMAIL" Width="20%" />
                            <RadzenDataGridColumn TItem="User" Property="Password" Title="PASSWORD" Width="15%" Filterable="false" />
                            <RadzenDataGridColumn TItem="User" Property="RoleName" Title="ROLE" Width="15%" />
                            <RadzenDataGridColumn TItem="User" Property="Status" Title="STATUS" Width="15%" Filterable="false">
                                <Template Context="data">
                                    @if (@data.Status == "Active")
                                    {
                                        <span class="actives">@data.Status</span>
                                    }
                                    else if (@data.Status == "In Active")
                                    {
                                        <span class="inactive">@data.Status</span>
                                    }
                                    else
                                    {
                                        <span class="deleted">@data.Status</span>
                                    }
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="User" Filterable="false" Sortable="false" Width="15%" Title="ACTION" TextAlign="TextAlign.Center">
                                <Template Context="actionRecord">
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@((args) =>GridEditButtonClick(args, actionRecord))" @onclick:stopPropagation="true" title="Edit" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@((args) =>GridDeleteButtonClick(args, actionRecord))" @onclick:stopPropagation="true" title="Delete" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    User objUser = new();
    IEnumerable<User>? modelData;
    IEnumerable<Role>? listRole;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState!).User;
        var userEmail = user.Claims.Where(c => c.Type == ClaimTypes.Name).Select(x => x.Value).FirstOrDefault();
        var userAccount = userService.GetbyUsername(userEmail);
        objUser.CreatedBy = userAccount.UserId;

        await LoadRole();
        await LoadDataGrid();
    }

    protected async Task OnFormSubmit()
    {
        try
        {
            var result = await userService.Insert(objUser);
            if (result == true)
            {
                await LoadDataGrid();
                Reset();
                Notification.Notify(NotificationSeverity.Success, summary: "Record Inserted Successfully");
            }
            else
            {
                Notification.Notify(NotificationSeverity.Warning, summary: "This Record Already Exists");
            }
        }
        catch (Exception ex)
        {
            Notification.Notify(NotificationSeverity.Error, summary: ex.Message);
        }
    }

    protected async Task GridEditButtonClick(MouseEventArgs args, dynamic data)
    {
        var dialogResult = await Dialog.OpenAsync<EditUser>("Edit - Login User Information", new Dictionary<string, object>() { { "UserId", data.UserId } });
        if (Convert.ToBoolean(dialogResult) == true)
        {
            await LoadDataGrid();
        }
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, dynamic data)
    {
        try
        {
            if (await Dialog.Confirm("Are you sure you want to delete this record?", "Confirm", new ConfirmOptions() { OkButtonText = "Yes, Delete", CancelButtonText = "No, Cancel" }) == true)
            {
                var result = await userService.Delete(data.UserId);
                Notification.Notify(NotificationSeverity.Success, summary: "Record Deleted Successfully");
                await LoadDataGrid();
            }
        }
        catch (Exception ex)
        {
            Notification.Notify(NotificationSeverity.Error, summary: ex.Message);
        }
    }

    protected async Task LoadDataGrid()
    {
        modelData = await Task.Run(userService.SelectAll);
        StateHasChanged();
    }

    async Task LoadRole()
    {
        listRole = await Task.Run(() => roleService.SelectActive());
    }

    private void Reset()
    {
        objUser = new User { Name = string.Empty, Email = string.Empty, Password = string.Empty };
    }
}