@page "/bankaccount";

<PageTitle>Bank Account Information</PageTitle>

@using System.Security.Claims;

@inject UserService userService;

@inject BankAccountService bankAccountService;
@inject BankService bankService;
@inject QRCodeService qrCodeService;
@inject CurrencyService currencyService;

@inject NotificationService Notification;
@inject DialogService Dialog;
@inject NavigationManager Navigation;

<div class="container-fluid">
    <RadzenTemplateForm TItem="BankAccount" Data="@objBankAccount" Submit=@OnFormSubmit>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Add - Bank Account Information</h4>
                    </div>

                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Bank *" />
                                    <RadzenDropDown Name="BankName" Data=@listBank TextProperty="BankName" ValueProperty="BankId" @bind-Value="@((objBankAccount.BankId))" Placeholder="-- Choose --" class="form-control" />
                                    <RadzenRequiredValidator Component="BankName" Text="Select Bank" DefaultValue="0" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Bank Account No *" />
                                    <RadzenTextBox Name="AccountNo" @bind-Value=@objBankAccount.AccountNo MaxLength="20" class="form-control" />
                                    <RadzenRequiredValidator Component="AccountNo" Text="Account No is required" />
                                    <RadzenRegexValidator Component="AccountNo" Text="Bank Account No should be Numeric" Pattern="^[0-9]*$" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Name *" />
                                    <RadzenTextBox Name="Name" @bind-Value=@objBankAccount.Name MaxLength="30" class="form-control" />
                                    <RadzenRequiredValidator Component="Name" Text="Name is required" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Nick Name *" />
                                    <RadzenTextBox Name="NickName" @bind-Value=@objBankAccount.NickName MaxLength="30" class="form-control" />
                                    <RadzenRequiredValidator Component="NickName" Text="Nick Name is required" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="QR Code *" />
                                    <RadzenDropDown Name="QRCodeName" Data=@listQRCode TextProperty="QRCodeName" ValueProperty="QRCodeId" @bind-Value="@((objBankAccount.QRCodeId))" Placeholder="-- Choose --" class="form-control" />
                                    <RadzenRequiredValidator Component="QRCodeName" Text="Please Select QRCode" DefaultValue="0" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Bank Login URL *" />
                                    <RadzenTextBox Name="BankLoginUrl" @bind-Value=@objBankAccount.BankLoginUrl MaxLength="500" class="form-control" />
                                    <RadzenRequiredValidator Component="BankLoginUrl" Text="Bank Login URL is required" />
                                    <RadzenRegexValidator Component="BankLoginUrl" Text="Bank Login URL must be proper" Pattern="(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Login Id *" />
                                    <RadzenTextBox Name="LoginId" @bind-Value=@objBankAccount.LoginId MaxLength="50" class="form-control" />
                                    <RadzenRequiredValidator Component="LoginId" Text="Login Id is required" />
                                    <RadzenLengthValidator Component="LoginId" Min="5" Text="Login Id should be at least 5 characters" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Password *" />
                                    <RadzenTextBox Name="Password" @bind-Value=@objBankAccount.Password MaxLength="50" class="form-control" />
                                    <RadzenRequiredValidator Component="Password" Text="Password is required" />
                                    <RadzenLengthValidator Component="Password" Min="5" Text="Password should be at least 5 characters" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Province *" />
                                    <RadzenTextBox Name="Province" @bind-Value=@objBankAccount.Province MaxLength="50" class="form-control" />
                                    <RadzenRequiredValidator Component="Province" Text="Province is required" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="State *" />
                                    <RadzenTextBox Name="State" @bind-Value=@objBankAccount.State MaxLength="50" class="form-control" />
                                    <RadzenRequiredValidator Component="State" Text="State is required" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Account Type *" />
                                    <RadzenDropDown Name="Type" Data="@listAccountType" Placeholder="-- Choose --" TextProperty="Name" ValueProperty="Name" @bind-Value="@((objBankAccount.Type))" class="form-control" />
                                    <RadzenRequiredValidator Component="Type" Text="Select Account Type" DefaultValue="0" />
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Balance Amount *" />
                                    <RadzenNumeric Name="BalanceAmount" @bind-Value=@objBankAccount.BalanceAmount ShowUpDown="false" class="form-control" />
                                    <RadzenRequiredValidator Component="BalanceAmount" Text="Balance Amount is Required" />
                                    <ValidationMessage For="@(() => objBankAccount.BalanceAmount)" />
                                </div>
                            </div>

                        </div>

                        <div class="row">

                            <div class="col-md-3">
                                <div class="form-group">
                                    <RadzenLabel Text="Currency *" />
                                    <RadzenDropDown Name="CurrencyName" Data=@listCurrency Placeholder="-- Choose --" TextProperty="CurrencyName" ValueProperty="CurrencyCode" @bind-Value="@((objBankAccount.CurrencyCode))" class="form-control" />
                                    <RadzenRequiredValidator Component="CurrencyName" Text="Select Currency" DefaultValue="0" />
                                </div>
                            </div>


                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="btn-vcenter">
                                        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                                        <RadzenButton ButtonType="ButtonType.Button" Text="Reset" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" Click="Reset" class="ms-2" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </RadzenTemplateForm>

    @* DataGrid Section Starts Here*@
    @*------------------------------------------------------------------------------*@
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">View - Bank Account Information</h4>
                </div>

                <div class="card-body">
                    <div style="width: calc(100vw - 350px);">
                        <RadzenDataGrid Data="@modelData" TItem="BankAccount" PageSize="10" AllowPaging="true" ShowPagingSummary="true" AllowSorting="true" AllowFiltering="true" ColumnWidth="150px" PagerHorizontalAlign="HorizontalAlign.Left"
                                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <Columns>
                                <RadzenDataGridColumn TItem="BankAccount" Property="BankAccountId" Title="BANK A/C ID" Frozen="true" Filterable="false" Visible="false" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="BankName" Title="BANK NAME" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="AccountNo" Title="BANK A/C NO" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="Name" Title="NAME" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="NickName" Title="NICK NAME" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="QRCodeName" Title="QR CODE" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="BankLoginUrl" Title="BANK LOGIN URL" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="LoginId" Title="LOGIN ID" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="Password" Title="PASSWORD" Filterable="false" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="Province" Title="PROVINCE" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="State" Title="STATE" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="Type" Title="ACCOUNT TYPE" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="BalanceAmount" Title="BALANCE AMOUNT" />
                                <RadzenDataGridColumn TItem="BankAccount" Property="CurrencyCode" Title="CURRENCY" />

                                <RadzenDataGridColumn TItem="BankAccount" Property="Status" Title="STATUS" Filterable="false">
                                    <Template Context="data">
                                        @if (@data.Status == "Active")
                                        {
                                            <span class="actives">@data.Status</span>
                                        }
                                        else if (@data.Status == "In Active")
                                        {
                                            <span class="inactive">@data.Status</span>
                                        }
                                        else
                                        {
                                            <span class="deleted">@data.Status</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="BankAccount" Filterable="false" Sortable="false" Title="BOT STATUS" TextAlign="TextAlign.Center">
                                    <Template Context="bot">
                                        <RadzenSwitch @bind-Value=@bot.BotStatus Change="@((args) =>SwitchChange(bot))" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="BankAccount" Filterable="false" Sortable="false" Title="ACTION" TextAlign="TextAlign.Center">
                                    <Template Context="actionRecord">
                                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@((args) =>GridEditButtonClick(args, actionRecord))" @onclick:stopPropagation="true" title="Edit" />
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@((args) =>GridDeleteButtonClick(args, actionRecord))" @onclick:stopPropagation="true" title="Delete" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    BankAccount objBankAccount = new();
    IEnumerable<BankAccount>? modelData;

    IEnumerable<Bank>? listBank;
    IEnumerable<QRCode>? listQRCode;
    IEnumerable<Currency>? listCurrency;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    public class DropdownValue
    {
        public string? Name { get; set; }
    }

    List<object> listAccountType = new List<object>()
    {
        new DropdownValue() { Name="Deposit" },
        new DropdownValue() { Name="Payout" },
        new DropdownValue() { Name="Settlement" },
    };

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState!).User;
        var userEmail = user.Claims.Where(c => c.Type == ClaimTypes.Name).Select(x => x.Value).FirstOrDefault();
        var userAccount = userService.GetbyUsername(userEmail);
        objBankAccount.CreatedBy = userAccount.UserId;
        
        await LoadBank();
        await LoadQRCode();
        await LoadCurrency();
        await LoadDataGrid();
    }

    protected async Task OnFormSubmit()
    {
        try
        {
            var result = await bankAccountService.Insert(objBankAccount);
            if (result == true)
            {
                await LoadDataGrid();
                Notification.Notify(NotificationSeverity.Success, summary: "Record Inserted Successfully");
                Reset();
            }
            else
            {
                Notification.Notify(NotificationSeverity.Warning, summary: "This Record Already Exists");
            }
        }
        catch (Exception ex)
        {
            Notification.Notify(NotificationSeverity.Error, summary: ex.Message);
        }
    }

    protected async Task GridEditButtonClick(MouseEventArgs args, dynamic data)
    {
        Navigation.NavigateTo($"editbankaccount/{data.BankAccountId}", forceLoad: false);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, dynamic data)
    {
        try
        {
            if (await Dialog.Confirm("Are you sure you want to delete this record?", "Confirm", new ConfirmOptions() { OkButtonText = "Yes, Delete", CancelButtonText = "No, Cancel" }) == true)
            {
                var result = await bankAccountService.Delete(data.BankAccountId);
                Notification.Notify(NotificationSeverity.Success, summary: "Record Deleted Successfully");
                await LoadDataGrid();
            }
        }
        catch (Exception ex)
        {
            Notification.Notify(NotificationSeverity.Error, summary: ex.Message);
        }
    }

    public async Task SwitchChange(BankAccount objdb)
    {
        await bankAccountService.UpdateBotStatus(objdb);
        Notification.Notify(NotificationSeverity.Success, summary: "BotStatus Changed Successfully");
    }


    protected async Task LoadDataGrid()
    {
        modelData = await Task.Run(bankAccountService.SelectAll);
        StateHasChanged();
    }

    async Task LoadBank()
    {
        listBank = await Task.Run(() => bankService.SelectActive());
    }

    async Task LoadQRCode()
    {
        listQRCode = await Task.Run(() => qrCodeService.SelectActive());
    }

    async Task LoadCurrency()
    {
        listCurrency = await Task.Run(currencyService.SelectActive);
    }

    private void Reset()
    {
        objBankAccount = new BankAccount { AccountNo = string.Empty, BankLoginUrl = string.Empty, LoginId = string.Empty, Password = string.Empty, Province = string.Empty, State = string.Empty, Type = string.Empty };
    }
}